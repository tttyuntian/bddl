(define (problem make_bento-0)
    (:domain omnigibson)

    (:objects
        tupperware.n.01_1 - tupperware.n.01
        countertop.n.01_1 - countertop.n.01
        sushi.n.01_1 sushi.n.01_2 sushi.n.01_3 sushi.n.01_4 - sushi.n.01
        electric_refrigerator.n.01_1 - electric_refrigerator.n.01
        pickle.n.01_1 pickle.n.01_2 - pickle.n.01
        white_rice.n.01_1 - white_rice.n.01
        bowl.n.01_1 - bowl.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop tupperware.n.01_1 countertop.n.01_1) 
        (inside sushi.n.01_1 electric_refrigerator.n.01_1) 
        (inside sushi.n.01_2 electric_refrigerator.n.01_1) 
        (inside sushi.n.01_3 electric_refrigerator.n.01_1) 
        (inside sushi.n.01_4 electric_refrigerator.n.01_1) 
        (inside pickle.n.01_1 electric_refrigerator.n.01_1) 
        (inside pickle.n.01_2 electric_refrigerator.n.01_1) 
        (filled bowl.n.01_1 white_rice.n.01_1)
        (inside bowl.n.01_1 electric_refrigerator.n.01_1) 
        (inroom electric_refrigerator.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?sushi.n.01 - sushi.n.01)
                (inside ?sushi.n.01 ?tupperware.n.01_1)
            )
            (forall 
                (?pickle.n.01 - pickle.n.01)
                (inside ?pickle.n.01 ?tupperware.n.01_1)
            )
            (contains ?tupperware.n.01_1 ?white_rice.n.01_1)
        )
    )
)