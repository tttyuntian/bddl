(define (problem cook_mustard_greens-0)
    (:domain omnigibson)

    (:objects
        mustard.n.03_1 mustard.n.03_2 mustard.n.03_3 - mustard.n.03
        mixing_bowl.n.01_1 - mixing_bowl.n.01
        countertop.n.01_1 - countertop.n.01
        water.n.06_1 - water.n.06
        saucepan.n.01_1 - saucepan.n.01
        cabinet.n.01_1 - cabinet.n.01
        sink.n.01_1 - sink.n.01
        stove.n.01_1 - stove.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (inside mustard.n.03_1 mixing_bowl.n.01_1) 
        (inside mustard.n.03_2 mixing_bowl.n.01_1) 
        (inside mustard.n.03_3 mixing_bowl.n.01_1) 
        (ontop mixing_bowl.n.01_1 countertop.n.01_1) 
        (not 
            (cooked mustard.n.03_1)
        ) 
        (not 
            (cooked mustard.n.03_2)
        ) 
        (not 
            (cooked mustard.n.03_3)
        ) 
        (inside saucepan.n.01_1 cabinet.n.01_1) 
        (insource sink.n.01_1 water.n.06_1) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom stove.n.01_1 kitchen) 
        (inroom sink.n.01_1 kitchen) 
        (inroom countertop.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?mustard.n.03 - mustard.n.03) 
                (cooked ?mustard.n.03)
            ) 
        )
    )
)