(define (problem stacking_wood-0)
    (:domain omnigibson)

    (:objects
        log.n.01_1 log.n.01_2 log.n.01_3 log.n.01_4 log.n.01_5 log.n.01_6 - log.n.01
        table.n.02_1 - table.n.02
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop log.n.01_1 floor.n.01_1)
        (ontop log.n.01_2 floor.n.01_1)
        (ontop log.n.01_3 floor.n.01_1)
        (ontop log.n.01_4 floor.n.01_1)
        (ontop log.n.01_5 floor.n.01_1)
        (ontop log.n.01_6 floor.n.01_1)
        (inroom table.n.02_1 garden) 
        (inroom floor.n.01_1 garden) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?log.n.01 - log.n.01) 
                (or 
                    (ontop ?log.n.01 ?table.n.02_1)
                    (or 
                        (ontop ?log.n.01 ?log.n.01_1)
                        (ontop ?log.n.01 ?log.n.01_2)
                        (ontop ?log.n.01 ?log.n.01_3)
                        (ontop ?log.n.01 ?log.n.01_4)
                        (ontop ?log.n.01 ?log.n.01_5)
                        (ontop ?log.n.01 ?log.n.01_6)
                    )
                )
            )
            (forn 
                (2)
                (?log.n.01 - log.n.01)
                (ontop ?log.n.01 ?table.n.02_1)
            )
            (forn 
                (2)
                (?log.n.01 - log.n.01)
                (or 
                    (ontop ?log.n.01 ?log.n.01_1)
                    (ontop ?log.n.01 ?log.n.01_2)
                    (ontop ?log.n.01 ?log.n.01_3)
                    (ontop ?log.n.01 ?log.n.01_4)
                    (ontop ?log.n.01 ?log.n.01_5)
                    (ontop ?log.n.01 ?log.n.01_6)
                )            
            )
        )
    )
)
