(define (problem cook_carrots-0)
    (:domain omnigibson)

    (:objects
        saucepot.n.01_1 - saucepot.n.01
        stove.n.01_1 - stove.n.01
        carrot.n.03_1 carrot.n.03_2 carrot.n.03_3 carrot.n.03_4 carrot.n.03_5 carrot.n.03_6 - carrot.n.03
        water.n.06_1 - water.n.06
        sink.n.01_1 - sink.n.01
        electric_refrigerator.n.01_1 - electric_refrigerator.n.01
        floor.n.01_1 - floor.n.01
        cabinet.n.01_1 - cabinet.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop saucepot.n.01_1 stove.n.01_1) 
        (inside carrot.n.03_1 electric_refrigerator.n.01_1) 
        (inside carrot.n.03_2 electric_refrigerator.n.01_1) 
        (inside carrot.n.03_3 electric_refrigerator.n.01_1) 
        (inside carrot.n.03_4 electric_refrigerator.n.01_1) 
        (inside carrot.n.03_5 electric_refrigerator.n.01_1) 
        (inside carrot.n.03_6 electric_refrigerator.n.01_1) 
        (not 
            (cooked carrot.n.03_1)
        )
        (not 
            (cooked carrot.n.03_2)
        )
        (not 
            (cooked carrot.n.03_3)
        )
        (not 
            (cooked carrot.n.03_4)
        )
        (not 
            (cooked carrot.n.03_5)
        )
        (not 
            (cooked carrot.n.03_6)
        )
        (insource sink.n.01_1 water.n.06_1)
        (inroom sink.n.01_1 kitchen)
        (inroom stove.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (inroom electric_refrigerator.n.01_1 kitchen) 
        (inroom cabinet.n.01_1 kitchen) 
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?carrot.n.03 - carrot.n.03) 
                (cooked ?carrot.n.03)
            )
        )
    )
)