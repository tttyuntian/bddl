(define (problem cook_red_peppers-0)
    (:domain omnigibson)

    (:objects
    	frying_pan.n.01_1 - frying_pan.n.01
    	stove.n.01_1 - stove.n.01
        hummus.n.01_1 - hummus.n.01
        hummus__box.n.01_1 - hummus__box.n.01
    	bell_pepper.n.02_1 bell_pepper.n.02_2 - bell_pepper.n.02
    	chopping_board.n.01_1 - chopping_board.n.01
    	carving_knife.n.01_1 - carving_knife.n.01
    	electric_refrigerator.n.01_1 - electric_refrigerator.n.01
    	countertop.n.01_1 - countertop.n.01
    	floor.n.01_1 - floor.n.01
    	agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (ontop frying_pan.n.01_1 countertop.n.01_1)
        (ontop carving_knife.n.01_1 countertop.n.01_1)
        (ontop chopping_board.n.01_1 countertop.n.01_1)
        (inside bell_pepper.n.02_1 electric_refrigerator.n.01_1)
        (inside bell_pepper.n.02_2 electric_refrigerator.n.01_1)
        (filled hummus__box.n.01_1 hummus.n.01_1)
        (ontop hummus__box.n.01_1 countertop.n.01_1)
        (not 
            (cooked bell_pepper.n.02_1)
        ) 
        (not 
            (cooked bell_pepper.n.02_1)
        ) 
        (inroom stove.n.01_1 kitchen) 
        (inroom electric_refrigerator.n.01_1 kitchen)
        (inroom floor.n.01_1 kitchen)
        (inroom countertop.n.01_1 kitchen)
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?bell_pepper.n.02 - bell_pepper.n.02) 
                (and
                    (cooked ?bell_pepper.n.02)
                    (covered ?bell_pepper.n.02 ?hummus.n.01_1)
                )
            )
        )
    )
)