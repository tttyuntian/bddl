(define (problem cook_tofu-0)
    (:domain omnigibson)

    (:objects
        stove.n.01_1 - stove.n.01
        tofu.n.02_1 tofu.n.02_2 tofu.n.02_3 tofu.n.02_4 - tofu.n.02
        tupperware.n.01_1 - tupperware.n.01
        wok.n.01_1 - wok.n.01
        water.n.06_1 - water.n.06
        sink.n.01_1 - sink.n.01
        cabinet.n.01_1 - cabinet.n.01
        electric_refrigerator.n.01_1 - electric_refrigerator.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )
    
    (:init 
        (inside tofu.n.02_1 tupperware.n.01_1) 
        (inside tofu.n.02_2 tupperware.n.01_1) 
        (inside tofu.n.02_3 tupperware.n.01_1) 
        (inside tofu.n.02_4 tupperware.n.01_1) 
        (inside tupperware.n.01_1 electric_refrigerator.n.01_1)
        (not 
            (cooked tofu.n.02_1)
        ) 
        (not 
            (cooked tofu.n.02_2)
        ) 
        (not 
            (cooked tofu.n.02_3)
        ) 
        (not 
            (cooked tofu.n.02_4)
        ) 
        (inside wok.n.01_1 cabinet.n.01_1) 
        (insource sink.n.01_1 water.n.06_1)
        (inroom electric_refrigerator.n.01_1 kitchen) 
        (inroom floor.n.01_1 kitchen) 
        (inroom stove.n.01_1 kitchen) 
        (inroom cabinet.n.01_1 kitchen) 
        (inroom sink.n.01_1 kitchen)
        (ontop agent.n.01_1 floor.n.01_1)
    )
    
    (:goal 
        (and 
            (forall 
                (?tofu.n.02 - tofu.n.02)
                (cooked ?tofu.n.02)
            )
        )
    )
)